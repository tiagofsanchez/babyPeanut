{"ast":null,"code":"import SearchBar from \"../components/SearchBar/searchbar\";\nvar clientID = '33c842c37a0242a5add060b9629e9455';\nvar redirectURI = 'http://localhost:3000';\nvar accessToken;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    var urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      expiresIn = urlExpiresIn[1];\n      accessToken = urlAccessToken[1];\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n  search: function search(searchterm) {\n    var options = {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    };\n    var searchUrl = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchterm.replace(' ', '%20'));\n    fetch(searchUrl, options).then(function (res) {\n      return console.log(res.json());\n    });\n  }\n};\n/* this was the getAccessToken that was given by the moderator and I will try something different */\n\n/* getAccessToken() {\n  if(accessToken)\n    return accessToken;\n  else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\n  {\n    accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n    const expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n\n    window.setTimeout(() => accessToken = '', expiresIn*1000);\n    window.history.pushState('Access Token', null, '/');\n\n    return accessToken;\n    console.log(\"access token successfully retrieved.\");\n  }\n  else\n  {\n    let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    window.location = url;\n  }\n}, */\n\n/* this is the way I want to take care of the json */\n\n/* .then(data => {\n  return data.tracks.items.map(track => {\n    return {\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    };\n});\n})\n.catch (err => console.log(err));\n},  */\n\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/tiagoformosinhosanchez/Projects/jamming/src/util/spotify.js"],"names":["SearchBar","clientID","redirectURI","accessToken","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","expiresIn","setTimeout","history","pushState","spotifyUrl","search","searchterm","options","headers","Authorization","searchUrl","replace","fetch","then","res","console","log","json"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mCAAtB;AAEA,IAAMC,QAAQ,GAAG,kCAAjB;AACA,IAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAJ;AAEA,IAAMC,OAAO,GAAG;AAEdC,EAAAA,cAFc,4BAEG;AACf,QAAGF,WAAH,EAAe;AACb,aAAOA,WAAP;AACD;;AACD,QAAMG,cAAc,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAvB;AACA,QAAMC,YAAY,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAArB;;AAEA,QAAGJ,cAAc,IAAIK,YAArB,EAAkC;AAC/BC,MAAAA,SAAS,GAAGD,YAAY,CAAC,CAAD,CAAxB;AACDR,MAAAA,WAAW,GAAGG,cAAc,CAAC,CAAD,CAA5B;AACFC,MAAAA,MAAM,CAACM,UAAP,CAAkB;AAAA,eAAMV,WAAW,GAAG,EAApB;AAAA,OAAlB,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACO,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACD,KALC,MAKG;AACFR,MAAAA,MAAM,CAACC,QAAP,GAAkBQ,UAAlB;AACJ;AACA,GAjBe;AAoBVC,EAAAA,MApBU,kBAoBHC,UApBG,EAoBS;AACjB,QAAMC,OAAO,GAAG;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,mBAAYlB,WAAZ;AAAd;AAAV,KAAhB;AACA,QAAMmB,SAAS,4DAAqDJ,UAAU,CAACK,OAAX,CAAmB,GAAnB,EAAwB,KAAxB,CAArD,CAAf;AACFC,IAAAA,KAAK,CAAEF,SAAF,EAAaH,OAAb,CAAL,CACCM,IADD,CACM,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,EAAZ,CAAJ;AAAA,KADT;AAGD;AA1BW,CAAhB;AA6BM;;AACA;;;;;;;;;;;;;;;;;;;;;AAsBA;;AACA;;;;;;;;;;;;;;AAcN;;;;AAKA,eAAezB,OAAf","sourcesContent":["import SearchBar from \"../components/SearchBar/searchbar\";\n\nconst clientID = '33c842c37a0242a5add060b9629e9455';\nconst redirectURI = 'http://localhost:3000';\nlet accessToken\n\nconst Spotify = {\n\n  getAccessToken() {\n    if(accessToken){\n      return accessToken;\n    }\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if(urlAccessToken && urlExpiresIn){\n       expiresIn = urlExpiresIn[1];\n      accessToken = urlAccessToken[1];\n    window.setTimeout(() => accessToken = '', expiresIn * 1000);\n    window.history.pushState('Access Token', null, '/');\n  }else{\n     window.location = spotifyUrl;\n}\n},\n\n\n      search(searchterm) {\n        const options = {headers: {Authorization: `Bearer ${accessToken}`},}\n        const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${searchterm.replace(' ', '%20')}`;\n      fetch (searchUrl, options)\n      .then(res => console.log(res.json()))\n      \n    }\n  }\n   \n      /* this was the getAccessToken that was given by the moderator and I will try something different */\n      /* getAccessToken() {\n        if(accessToken)\n          return accessToken;\n        else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\n        {\n          accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n          const expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      \n          window.setTimeout(() => accessToken = '', expiresIn*1000);\n          window.history.pushState('Access Token', null, '/');\n      \n          return accessToken;\n          console.log(\"access token successfully retrieved.\");\n        }\n        else\n        {\n          let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n          window.location = url;\n        }\n      }, */\n\n\n      /* this is the way I want to take care of the json */ \n      /* .then(data => {\n        return data.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n      });\n      })\n      .catch (err => console.log(err));\n    },  */ \n    \n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}