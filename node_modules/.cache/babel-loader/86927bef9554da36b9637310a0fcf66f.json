{"ast":null,"code":"import SearchBar from \"../components/SearchBar/searchbar\";\nvar clientID = '33c842c37a0242a5add060b9629e9455';\nvar redirectURI = 'http://localhost:3000';\nvar accessToken;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) return accessToken;else if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n      var expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n      console.log(\"access token successfully retrieved.\");\n    } else {\n      var url = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n      window.location = url;\n    }\n  },\n  search: function search(searchterm) {\n    var options = {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    };\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchterm), options).then(function (res) {\n      return res.json();\n    }).then(function (jsonResponse) {\n      if (jsonResponse.ok) {\n        var tracks = jsonResponse.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n\n      throw new Error('Request failed');\n    }, function (networkError) {\n      return console.log(networkError.message);\n    });\n  }\n};\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/tiagoformosinhosanchez/Projects/jamming/src/util/spotify.js"],"names":["SearchBar","clientID","redirectURI","accessToken","Spotify","getAccessToken","window","location","href","match","expiresIn","setTimeout","history","pushState","console","log","url","search","searchterm","options","headers","Authorization","fetch","then","res","json","jsonResponse","ok","tracks","map","track","id","name","artist","artists","album","uri","Error","networkError","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mCAAtB;AAEA,IAAMC,QAAQ,GAAG,kCAAjB;AACA,IAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAJ;AAEA,IAAMC,OAAO,GAAG;AAEZC,EAAAA,cAFY,4BAEK;AACb,QAAGF,WAAH,EACE,OAAOA,WAAP,CADF,KAEK,IAAGG,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,KAAsDH,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAzD,EACL;AACEN,MAAAA,WAAW,GAAGG,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,EAAmD,CAAnD,CAAd;AACA,UAAMC,SAAS,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,EAAiD,CAAjD,CAAlB;AAEAH,MAAAA,MAAM,CAACK,UAAP,CAAkB;AAAA,eAAMR,WAAW,GAAG,EAApB;AAAA,OAAlB,EAA0CO,SAAS,GAAC,IAApD;AACAJ,MAAAA,MAAM,CAACM,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AAEA,aAAOV,WAAP;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD,KAVI,MAYL;AACE,UAAIC,GAAG,8DAAuDf,QAAvD,4EAAiIC,WAAjI,CAAP;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBS,GAAlB;AACD;AACF,GArBS;AAuBVC,EAAAA,MAvBU,kBAuBHC,UAvBG,EAuBS;AACrB,QAAMC,OAAO,GAAG;AACZC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,mBAAYlB,WAAZ;AAAd;AADG,KAAhB;AAGA,WAAOmB,KAAK,0DAAoDJ,UAApD,GAAkEC,OAAlE,CAAL,CACNI,IADM,CACA,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADH,EAENF,IAFM,CAEA,UAAAG,YAAY,EAAI;AACnB,UAAIA,YAAY,CAACC,EAAjB,EAAqB;AACjB,YAAMC,MAAM,GAAGF,YAAY,CAACG,GAAb,CAAiB,UAAAC,KAAK,EAAI;AACvC,iBAAQ;AACNC,YAAAA,EAAE,EAAED,KAAK,CAACC,EADJ;AAENC,YAAAA,IAAI,EAAEF,KAAK,CAACE,IAFN;AAGNC,YAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHnB;AAING,YAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJb;AAKNI,YAAAA,GAAG,EAAEN,KAAK,CAACM;AALL,WAAR;AAOL,SARkB,CAAf;AASH;;AAAC,YAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACL,KAdM,EAcJ,UAAAC,YAAY;AAAA,aAAIxB,OAAO,CAACC,GAAR,CAAYuB,YAAY,CAACC,OAAzB,CAAJ;AAAA,KAdR,CAAP;AAeH;AA1Ce,CAAhB;AA8CA;;;;AAKA,eAAenC,OAAf","sourcesContent":["import SearchBar from \"../components/SearchBar/searchbar\";\n\nconst clientID = '33c842c37a0242a5add060b9629e9455';\nconst redirectURI = 'http://localhost:3000';\nlet accessToken\n\nconst Spotify = {\n\n    getAccessToken() {\n        if(accessToken)\n          return accessToken;\n        else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\n        {\n          accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n          const expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      \n          window.setTimeout(() => accessToken = '', expiresIn*1000);\n          window.history.pushState('Access Token', null, '/');\n      \n          return accessToken;\n          console.log(\"access token successfully retrieved.\");\n        }\n        else\n        {\n          let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n          window.location = url;\n        }\n      },\n\n      search(searchterm) {\n    const options = {\n        headers: {Authorization: `Bearer ${accessToken}`},\n    }\n    return fetch (`https://api.spotify.com/v1/search?type=track&q=${searchterm}`, options)\n    .then (res => res.json())\n    .then (jsonResponse => {\n        if (jsonResponse.ok) {\n            const tracks = jsonResponse.map(track => {\n              return ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n              });\n        }) \n        } throw new Error('Request failed');\n    }, networkError => console.log(networkError.message));\n}\n\n\n}\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}