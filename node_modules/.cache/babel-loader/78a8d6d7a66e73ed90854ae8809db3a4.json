{"ast":null,"code":"import SearchBar from \"../components/SearchBar/searchbar\";\nvar clientId = '33c842c37a0242a5add060b9629e9455';\nvar redirectUri = 'http://localhost:3000';\nvar accessToken;\nvar expiresIn = undefined;\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=\".concat(clientId, \"&redirect_uri=\").concat(redirectUri);\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    // 1. case: already there?\n    if (accessToken) {\n      return accessToken;\n    } // 2. case: already in URL?\n\n\n    var urlString = window.location.href;\n    urlString = urlString.replace('#', '?');\n    var url = new URL(urlString);\n    accessToken = url.searchParams.get(\"access_token\");\n    console.log(this.accessToken); // this.accessToken = this.extract(url, \"access_token=\", \"&\");\n\n    if (accessToken) {\n      var _expiresIn = url.searchParams.get(\"expires_in\");\n\n      window.setTimeout(function () {\n        return accessToken = null;\n      }, _expiresIn * 1000); // window.history.pushState('Access Token', null, '/');\n\n      console.log(\"access token successfully retrieved.\");\n      return accessToken;\n    } else {\n      // 3. case: fetch from spotify\n      var state = 4321; // TODO generate state, save to app-state and validate\n      // window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-private&redirect_uri=${spotifyRedirectUrl}&state=${state}`;\n\n      window.location.href = spotifyUrl;\n    }\n  },\n  search: function search(searchterm) {\n    var options = {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    };\n    var searchUrl = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchterm.replace(' ', '%20'));\n    fetch(searchUrl, options).then(function (res) {\n      return console.log(res.json());\n    });\n  }\n};\n/* this was the getAccessToken that was given by the moderator and I will try something different */\n\n/* getAccessToken() {\n  if(accessToken)\n    return accessToken;\n  else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\n  {\n    accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n    const expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n\n    window.setTimeout(() => accessToken = '', expiresIn*1000);\n    window.history.pushState('Access Token', null, '/');\n\n    return accessToken;\n    console.log(\"access token successfully retrieved.\");\n  }\n  else\n  {\n    let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    window.location = url;\n  }\n}, */\n\n/* this is the way I want to take care of the json */\n\n/* .then(data => {\n  return data.tracks.items.map(track => {\n    return {\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    };\n});\n})\n.catch (err => console.log(err));\n},  */\n\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/tiagoformosinhosanchez/Projects/jamming/src/util/spotify.js"],"names":["SearchBar","clientId","redirectUri","accessToken","expiresIn","undefined","spotifyUrl","Spotify","getAccessToken","urlString","window","location","href","replace","url","URL","searchParams","get","console","log","setTimeout","state","search","searchterm","options","headers","Authorization","searchUrl","fetch","then","res","json"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mCAAtB;AAEA,IAAMC,QAAQ,GAAG,kCAAjB;AACA,IAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAJ;AACA,IAAIC,SAAS,GAAGC,SAAhB;AACA,IAAMC,UAAU,+GAAwGL,QAAxG,2BAAiIC,WAAjI,CAAhB;AAGA,IAAMK,OAAO,GAAG;AACdC,EAAAA,cADc,4BACG;AACf;AACA,QAAIL,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAJc,CAKf;;;AACA,QAAIM,SAAS,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhC;AACAH,IAAAA,SAAS,GAAGA,SAAS,CAACI,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,CAAZ;AACA,QAAIC,GAAG,GAAG,IAAIC,GAAJ,CAAQN,SAAR,CAAV;AACAN,IAAAA,WAAW,GAAGW,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,WAAjB,EAVe,CAWf;;AACA,QAAIA,WAAJ,EAAiB;AACb,UAAMC,UAAS,GAAGU,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,YAArB,CAAlB;;AACAP,MAAAA,MAAM,CAACU,UAAP,CAAkB;AAAA,eAAMjB,WAAW,GAAG,IAApB;AAAA,OAAlB,EAA4CC,UAAS,GAAG,IAAxD,EAFa,CAGb;;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,aAAOhB,WAAP;AACH,KAND,MAMO;AACH;AACA,UAAIkB,KAAK,GAAG,IAAZ,CAFG,CAEe;AAClB;;AACAX,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBN,UAAvB;AACH;AACF,GAzBa;AA6BVgB,EAAAA,MA7BU,kBA6BHC,UA7BG,EA6BS;AACjB,QAAMC,OAAO,GAAG;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,mBAAYvB,WAAZ;AAAd;AAAV,KAAhB;AACA,QAAMwB,SAAS,4DAAqDJ,UAAU,CAACV,OAAX,CAAmB,GAAnB,EAAwB,KAAxB,CAArD,CAAf;AACFe,IAAAA,KAAK,CAAED,SAAF,EAAaH,OAAb,CAAL,CACCK,IADD,CACM,UAAAC,GAAG;AAAA,aAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAG,CAACC,IAAJ,EAAZ,CAAJ;AAAA,KADT;AAGD;AAnCW,CAAhB;AAsCM;;AACA;;;;;;;;;;;;;;;;;;;;;AAsBA;;AACA;;;;;;;;;;;;;;AAcN;;;;AAKA,eAAexB,OAAf","sourcesContent":["import SearchBar from \"../components/SearchBar/searchbar\";\n\nconst clientId = '33c842c37a0242a5add060b9629e9455';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken\nlet expiresIn = undefined;\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n\nconst Spotify = {\n  getAccessToken() {\n    // 1. case: already there?\n    if (accessToken) {\n        return accessToken;\n    }\n    // 2. case: already in URL?\n    let urlString = window.location.href;\n    urlString = urlString.replace('#', '?')\n    let url = new URL(urlString);\n    accessToken = url.searchParams.get(\"access_token\");\n    console.log(this.accessToken)\n    // this.accessToken = this.extract(url, \"access_token=\", \"&\");\n    if (accessToken) {\n        const expiresIn = url.searchParams.get(\"expires_in\");\n        window.setTimeout(() => accessToken = null, expiresIn * 1000);\n        // window.history.pushState('Access Token', null, '/');\n        console.log(\"access token successfully retrieved.\");\n        return accessToken;\n    } else {\n        // 3. case: fetch from spotify\n        let state = 4321; // TODO generate state, save to app-state and validate\n        // window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-private&redirect_uri=${spotifyRedirectUrl}&state=${state}`;\n        window.location.href = spotifyUrl;\n    }\n  },\n  \n\n\n      search(searchterm) {\n        const options = {headers: {Authorization: `Bearer ${accessToken}`},}\n        const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${searchterm.replace(' ', '%20')}`;\n      fetch (searchUrl, options)\n      .then(res => console.log(res.json()))\n      \n    }\n  }\n   \n      /* this was the getAccessToken that was given by the moderator and I will try something different */\n      /* getAccessToken() {\n        if(accessToken)\n          return accessToken;\n        else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\n        {\n          accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n          const expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      \n          window.setTimeout(() => accessToken = '', expiresIn*1000);\n          window.history.pushState('Access Token', null, '/');\n      \n          return accessToken;\n          console.log(\"access token successfully retrieved.\");\n        }\n        else\n        {\n          let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n          window.location = url;\n        }\n      }, */\n\n\n      /* this is the way I want to take care of the json */ \n      /* .then(data => {\n        return data.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n      });\n      })\n      .catch (err => console.log(err));\n    },  */ \n    \n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}