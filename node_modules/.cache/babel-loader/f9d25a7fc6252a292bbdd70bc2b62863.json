{"ast":null,"code":"var clientId = '33c842c37a0242a5add060b9629e9455';\nvar redirectUri = 'http://localhost:3000';\nvar accessToken;\nvar expiresIn = undefined;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) return accessToken;else if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n      expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n      console.log(\"access token successfully retrieved.\");\n    } else {\n      var url = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = url;\n    }\n  },\n  search: function search(searchterm) {\n    var options = {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    };\n    var searchUrl = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchterm.replace(' ', '%20'));\n    return fetch(searchUrl, options).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      console.log(data);\n      return data.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  },\n  savePlaylist: function savePlaylist(playListName, trackURIs) {\n    /* geting the user id and this is workign as I am getting my userId logged*/\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    var userUrl = 'https://api.spotify.com/v1/me';\n    var userId;\n    var playlistId;\n    fetch(userUrl, {\n      headers: headers\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      userId = data.id; // return new Promise((resolve, reject) => {\n      //   setTimeout(() => {\n      //     resolve(userId)\n      //   }, 3000)\n      // })\n    })\n    /* posting the playlistName and getting a playlistId */\n    .then(function () {\n      // console.log('resolved')\n      var newPlaylistUrl = \"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\");\n      return fetch(newPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: playListName\n        })\n      });\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      playlistId = data.id; // return new Promise((resolve, reject) => {\n      //   resolve(playlistId)\n      // })\n    })\n    /* posting the tracks with a uri that is in the playList into Spotify */\n    .then(function () {\n      var addPlayListTracksUrl = \"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\");\n      fetch(addPlayListTracksUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          uris: trackURIs\n        })\n      });\n    });\n  }\n};\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/tiagoformosinhosanchez/Projects/jamming/src/util/spotify.js"],"names":["clientId","redirectUri","accessToken","expiresIn","undefined","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","console","log","url","search","searchterm","options","headers","Authorization","searchUrl","replace","fetch","then","res","json","data","tracks","items","map","track","id","name","artist","artists","album","uri","catch","err","savePlaylist","playListName","trackURIs","userUrl","userId","playlistId","newPlaylistUrl","method","body","JSON","stringify","addPlayListTracksUrl","uris"],"mappings":"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","sourcesContent":["\nconst clientId = '33c842c37a0242a5add060b9629e9455';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken\nlet expiresIn = undefined;\n\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken)\n      return accessToken;\n    else if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n      expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n      console.log(\"access token successfully retrieved.\");\n    }\n    else {\n      let url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = url;\n    }\n  },\n\n  search(searchterm) {\n    const options = { headers: { Authorization: `Bearer ${accessToken}` }, }\n    const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${searchterm.replace(' ', '%20')}`;\n\n    return fetch(searchUrl, options)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        return data.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      })\n      .catch(err => console.log(err));\n  },\n\n  savePlaylist(playListName, trackURIs) {\n\n    /* geting the user id and this is workign as I am getting my userId logged*/\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    const userUrl = 'https://api.spotify.com/v1/me'\n    let userId;\n    let playlistId;\n\n    fetch(userUrl, { headers: headers })\n      .then(res => res.json())\n      .then(data => {\n        userId = data.id;\n\n        // return new Promise((resolve, reject) => {\n        //   setTimeout(() => {\n        //     resolve(userId)\n        //   }, 3000)\n        // })\n      })\n\n      /* posting the playlistName and getting a playlistId */\n      .then(() => {\n\n        // console.log('resolved')\n\n        const newPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        return fetch(newPlaylistUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            name: playListName\n          })\n        })\n      })\n      .then(res => res.json())\n      .then(data => {\n        playlistId = data.id;\n\n        // return new Promise((resolve, reject) => {\n        //   resolve(playlistId)\n        // })\n      })\n\n      /* posting the tracks with a uri that is in the playList into Spotify */\n      .then(() => {\n        const addPlayListTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        fetch(addPlayListTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      })\n  },\n\n}\n\n\n\n\n\n/* Questions: \n1. To check the url I think this will be here https://developer.spotify.com/documentation/web-api/reference-beta/#endpoint-search\n2. Do I need to take care of any error, or that is just for POST method?*/\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}