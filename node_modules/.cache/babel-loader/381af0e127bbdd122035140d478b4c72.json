{"ast":null,"code":"import _classCallCheck from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/tiagoformosinhosanchez/Projects/jamming/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/tiagoformosinhosanchez/Projects/jamming/src/components/App/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport '../SearchBar/searchbar';\nimport '../SearchResults/searchresults';\nimport '../Playlist/playlist';\nimport SearchBar from '../SearchBar/searchbar';\nimport SearchResults from '../SearchResults/searchresults';\nimport Playlist from '../Playlist/playlist';\nimport Spotify from '../../util/spotify';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      accessToken: null,\n      searchTerm: '',\n      searchResults: [{\n        name: \"Tiny Dancer\",\n        artist: \"Elton John\",\n        album: \"Madman Across The Water\",\n        id: 11,\n        uri: 1231\n      }, {\n        name: \"Tiny Dancer\",\n        artist: \"Tiago\",\n        album: \"The WORST ABLBUM EVER\",\n        id: 22,\n        uri: 234324\n      }],\n      playListName: \"Top List\",\n      playListTracks: [{\n        name: \"I would love to sing\",\n        artist: \"Tiago\",\n        album: \"The WORST ABLBUM EVER\",\n        id: 1,\n        uri: 543\n      }, {\n        name: \"I would love to sing\",\n        artist: \"Tiago\",\n        album: \"The WORST ABLBUM EVER\",\n        id: 2,\n        uri: 892\n      }]\n    };\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var tempPlaylist = this.state.playListTracks;\n\n      if (this.state.playListTracks.find(function (savedTrack) {\n        return savedTrack.id === track.id;\n      })) {\n        return;\n      } else {\n        tempPlaylist.push(track);\n        this.setState({\n          playListTracks: tempPlaylist\n        });\n      }\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var tempPlaylist = this.state.playListTracks;\n      var newPlaylist = tempPlaylist.filter(function (removeTrack) {\n        return removeTrack.id !== track.id;\n      });\n      this.setState({\n        playListTracks: newPlaylist\n      });\n    }\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playListName: name\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var trackURIs = this.state.playListTracks.map(function (track) {\n        return track.uri;\n      });\n      console.log(trackURIs);\n      return trackURIs;\n    }\n  }, {\n    key: \"search\",\n    value: function search(_search) {\n      this.setState({\n        searchTerm: _search\n      });\n      console.log(this.state.searchTerm);\n    }\n  }, {\n    key: \"search\",\n    value: function search(term) {\n      Spotify.search(term);\n      this.setState({\n        playListTracks: Spotify.search\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          searchResults = _this$state.searchResults,\n          playListName = _this$state.playListName,\n          playListTracks = _this$state.playListTracks;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        class: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        onSave: this.savePlaylist,\n        onNameChange: this.updatePlaylistName,\n        onRemove: this.removeTrack,\n        playListName: playListName,\n        playListTracks: playListTracks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/tiagoformosinhosanchez/Projects/jamming/src/components/App/App.js"],"names":["React","Component","SearchBar","SearchResults","Playlist","Spotify","App","props","state","accessToken","searchTerm","searchResults","name","artist","album","id","uri","playListName","playListTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tempPlaylist","find","savedTrack","push","setState","newPlaylist","filter","trackURIs","map","console","log","term"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport '../SearchBar/searchbar';\nimport '../SearchResults/searchresults';\nimport '../Playlist/playlist';\nimport SearchBar from '../SearchBar/searchbar';\nimport SearchResults from '../SearchResults/searchresults';\nimport Playlist from '../Playlist/playlist';\nimport Spotify from '../../util/spotify'\n\n\n\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      accessToken: null,\n      searchTerm: '',\n      \n      searchResults: [\n        {\n          name: \"Tiny Dancer\",\n          artist: \"Elton John\", \n          album: \"Madman Across The Water\", \n          id: 11,\n          uri: 1231,\n        },\n        {\n          name: \"Tiny Dancer\",\n          artist: \"Tiago\", \n          album: \"The WORST ABLBUM EVER\",\n          id: 22,\n          uri: 234324,\n        },\n        \n      ],\n\n      playListName: \"Top List\",\n      \n      playListTracks: [\n        {\n          name: \"I would love to sing\",\n          artist: \"Tiago\", \n          album: \"The WORST ABLBUM EVER\", \n          id: 1,\n          uri: 543,\n        },\n        {\n          name: \"I would love to sing\",\n          artist: \"Tiago\", \n          album: \"The WORST ABLBUM EVER\",\n          id: 2,\n          uri: 892,\n        }, \n      ]\n      }\n\n      this.addTrack = this.addTrack.bind(this);\n      this.removeTrack = this.removeTrack.bind(this);\n      this.updatePlaylistName= this.updatePlaylistName.bind(this);\n      this.savePlaylist = this.savePlaylist.bind(this); \n      this.search = this.search.bind(this);\n     }\n\n\n  addTrack (track) {\n    let tempPlaylist = this.state.playListTracks;\n    if(this.state.playListTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else { \n      tempPlaylist.push(track);\n      this.setState ({playListTracks: tempPlaylist})\n    }\n  }\n\n  removeTrack (track) {\n    const tempPlaylist= this.state.playListTracks;\n    const newPlaylist = tempPlaylist.filter(removeTrack => removeTrack.id !== track.id);\n    this.setState ({playListTracks: newPlaylist});\n    }\n\n    updatePlaylistName(name) {\n    this.setState({playListName: name})\n  }  \n  \n  savePlaylist () {  \n    const trackURIs = this.state.playListTracks.map(track => {return track.uri});\n    console.log(trackURIs);\n    return trackURIs;\n  }\n\n  search(search) {\n    this.setState({searchTerm: search})\n    console.log(this.state.searchTerm);  \n  }\n  \n  search(term) {\n    Spotify.search(term);\n    this.setState({playListTracks: Spotify.search});\n  }\n\n  render() {\n    const {searchResults, playListName, playListTracks} = this.state\n    return (\n      <div>\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div class=\"App\">\n            <SearchBar onSearch={this.search} />\n            <div className=\"App-playlist\">\n              <SearchResults searchResults={searchResults} onAdd={this.addTrack}/>\n              <Playlist onSave={this.savePlaylist} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playListName={playListName} playListTracks={playListTracks}/>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}